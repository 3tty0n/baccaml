(* -*- mode: tuareg -*- *)
(* vim: set syntax=ocaml: *)

let rec frame_reset stack old_base new_base ret n i =
  if n = i then (stack.(old_base + n + 1) <- ret; old_base + n + 2)
  else (stack.(old_base + i) <- stack.(new_base + i);
        frame_reset stack old_base new_base ret n (i + 1)) in

(* declaring a casting function: int array -> int *)
let rec cast_fAII x = x in
(* declaring a casting function: int -> int array *)
let rec cast_fIAI x = x in

let rec frame_reset stack old_base new_base ret n i =
  if n = i then (stack.(old_base + n + 1) <- ret; old_base + n + 2)
  else (stack.(old_base + i) <- stack.(new_base + i);
        frame_reset stack old_base new_base ret n (i + 1)) in

let rec pop stack sp = stack.(sp - 1) in
let rec push stack sp v = stack.(sp) <- v in

let rec interp stack sp bytecode pc =
  (* jit_merge_point pc stack sp; *)
  let instr = bytecode.(pc) in
  if instr = 0 then             (* UNIT *)
    interp stack sp bytecode (pc + 1)
  else if instr = 1 then        (* ADD *)
    let v2 = stack.(sp - 1) in  (* sp: sp - 1 *)
    let v1 = stack.(sp - 2) in  (* sp: sp - 2 *)
    stack.(sp-2) <- (v1+v2);    (* sp: sp - 1 *)
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 2 then        (* SUB *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    stack.(sp - 2) <- (v1 - v2);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 3 then        (* MUL *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    stack.(sp - 2) <- (v1 * v2);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 4 then        (* NOT *)
    let v = stack.(sp - 1) in
    let n = (if v = 0 then 1 else 0)in
    stack.(sp - 1) <- n;
    interp stack sp bytecode (pc + 1)
  else if instr = 5 then        (* NEG *)
    let v = stack.(sp - 1) in
    stack.(sp - 1) <- (-v);
    interp stack sp bytecode (pc+1)
  else if instr = 6 then        (* LT *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    let n = (if v1 <= v2 then 1 else 0) in
    stack.(sp - 2) <- n;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 7 then        (* EQ *)
    let v1 = stack.(sp - 1) in
    let v2 = stack.(sp - 2) in
    let v = (if v1 = v2 then 1 else 0) in
    stack.(sp - 2) <- v;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 31 then        (* GT *)
    let v1 = stack.(sp - 1) in
    let v2 = stack.(sp - 2) in
    let v = (if v1 >= v2 then 1 else 0) in
    stack.(sp - 2) <- v;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 15 then       (* CONST *)
    let c = bytecode.(pc + 1) in
    stack.(sp) <- c;
    interp stack (sp + 1) bytecode (pc + 2)
  else if instr = 8 then        (* JUMP_IF_ZERO *)
    let addr = bytecode.(pc + 1) in
    let v = stack.(sp - 1) in
    let sp2 = sp - 1 in
    if v = 0 then (
      interp stack sp2 bytecode addr
    ) else
      interp stack sp2 bytecode (pc + 2)
  else if instr = 9 then        (* JUMP *)
    let addr = bytecode.(pc + 1) in
    if addr < pc then (
      interp stack sp bytecode addr
    ) else
      interp stack sp bytecode addr
  else if instr = 10 then        (* CALL *)
    let addr = bytecode.(pc + 1) in
    let rands = bytecode.(pc + 2) in
    (stack.(sp) <- pc+3;
     stack.(sp+1) <- 200;   (* push jit flag *)
     let sp2 = sp+2 in
     if addr < pc then (      (* addr=22 (tak) *)
       interp stack sp2 bytecode addr
     ) else (
       interp stack sp2 bytecode addr))
  else if instr = 11 then       (* RET *)
    let v = stack.(sp - 1) in
    let mode = stack.(sp-2) in  (* sp: sp-3 *)
    let addr = stack.(sp-3) in  (* sp: sp-3 *)
    if mode = 200 then          (* check jit flag *)
      (let n = bytecode.(pc + 1) in
       stack.(sp - n - 3) <- v; (* sp: sp-3-n+1 = sp-2-n *)
       let sp2 = sp - n - 2 in
       if addr < pc then (      (* if add = 42 then (fib) *)
         interp stack sp2 bytecode addr
       ) else (
         interp stack sp2 bytecode addr))
    else v
  else if instr = 12 then       (* HALT *)
    stack.(sp - 1)
  else if instr = 13 then       (* DUP *)
    let n = bytecode.(pc + 1) in
    let v = stack.(sp - n - 1) in
    stack.(sp) <- v;
    interp stack (sp + 1) bytecode (pc + 2)
  else if instr = 14 then       (* POP1 *)
    let v = stack.(sp - 1) in
    let _ = stack.(sp - 2) in
    stack.(sp - 2) <- v;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 16 then       (* GET *)
    let n = stack.(sp - 1) in
    let arr = cast_fIAI(stack.(sp - 2)) in
    stack.(sp - 2) <- arr.(n);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 17 then       (* PUT *)
    let i = stack.(sp - 1) in
    let arr = cast_fIAI(stack.(sp - 2)) in
    let n = stack.(sp - 3) in
    arr.(i) <- n;
    stack.(sp - 3) <- cast_fAII(arr);
    interp stack (sp - 2) bytecode (pc + 1)
  else if instr = 18 then       (* ARRAYMAKE *)
    let init = stack.(sp - 1) in
    let size = stack.(sp - 2) in
    let a = Array.make size init in
    stack.(sp - 2) <- cast_fAII(a);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 19 then       (* FRAME_RESET *)
    let o = bytecode.(pc + 1) in
    let l = bytecode.(pc + 2) in
    let n = bytecode.(pc + 3) in
    let ret = stack.(sp-n-l-1) in
    let old_base = sp - n - l - o - 1 in
    let new_base = sp - n in
    let sp2 = frame_reset stack old_base new_base ret n 0 in
    interp stack sp2 bytecode (pc + 4)
  else if instr = 20 then       (* PRINT_INT *)
    let v = stack.(sp - 1) in
    (* prerr_int v; *)
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 21 then       (* PRINT_NEWLINE *)
    (print_newline ();
     interp stack sp bytecode (pc + 1))
  else if instr = 22 then       (* METHOD_ENTRY *)
    interp stack sp bytecode (pc + 1)
  else if instr = 23 then       (* CONST0 *)
    (stack.(sp) <- 0;
     interp stack (sp + 1) bytecode (pc + 1))
  else if instr = 24 then       (* DUP0 *)
    let v = stack.(sp - 1) in
    stack.(sp) <- v;
    interp stack (sp + 1) bytecode (pc + 1)
  else if instr = 25 then       (* METHOD_COMP *)
    interp stack sp bytecode (pc+1)
  else if instr = 26 then       (* TRACING_COMP *)
    interp stack sp bytecode (pc+1)
  else if instr = 27 then
    (interp stack sp bytecode (pc+1))
  else if instr = 28 then       (* NOP *)
    interp stack sp bytecode (pc+1)
  else if instr = 32 then       (* READ_INT *)
    let n = read_int () in
    stack.(sp) <- n;
    interp stack (sp+1) bytecode (pc+1)
  else
    -1000 in
let stk  = Array.make 100 0 in
stk.(0) <- (-987);
let code = Array.make 200 0 in
code.(0) <- 15; code.(1) <- 8192;
code.(2) <- 15; code.(3) <- 1;
code.(4) <- 13; code.(5) <- 1;
code.(6) <- 13; code.(7) <- 1;
code.(8) <- 18;
code.(9) <- 15; code.(10) <- -1;
code.(11) <- 24;
code.(12) <- 13; code.(13) <- 2;
code.(14) <- 23;
code.(15) <- 17;
code.(16) <- 15; code.(17) <- -1;
code.(18) <- 24;
code.(19) <- 13; code.(20) <- 4;
code.(21) <- 15; code.(22) <- 1;
code.(23) <- 17;
code.(24) <- 15; code.(25) <- 1;
code.(26) <- 13; code.(27) <- 5;
code.(28) <- 13; code.(29) <- 1;
code.(30) <- 27;
code.(31) <- 10; code.(32) <- 96;
code.(33) <- 2;
code.(34) <- 13; code.(35) <- 6;
code.(36) <- 15; code.(37) <- 23;
code.(38) <- 16;
code.(39) <- 24;
code.(40) <- 20;
code.(41) <- 14;
code.(42) <- 14;
code.(43) <- 14;
code.(44) <- 14;
code.(45) <- 14;
code.(46) <- 14;
code.(47) <- 14;
code.(48) <- 14;
code.(49) <- 14;
code.(50) <- 14;
code.(51) <- 14;
code.(52) <- 12;
code.(53) <- -1048;
code.(54) <- 13; code.(55) <- 3;
code.(56) <- 15; code.(57) <- 8192;
code.(58) <- 6;
code.(59) <- 8; code.(60) <- 91;
code.(61) <- 15; code.(62) <- -1;
code.(63) <- 24;
code.(64) <- 13; code.(65) <- 6;
code.(66) <- 13; code.(67) <- 6;
code.(68) <- 17;
code.(69) <- 13; code.(70) <- 5;
code.(71) <- 13; code.(72) <- 5;
code.(73) <- 1;
code.(74) <- 13; code.(75) <- 7;
code.(76) <- 13; code.(77) <- 1;
code.(78) <- 13; code.(79) <- 7;
code.(80) <- 19;
code.(81) <- 4;
code.(82) <- 3;
code.(83) <- 3;
code.(84) <- 9; code.(85) <- 54;
code.(86) <- 14;
code.(87) <- 14;
code.(88) <- 14;
code.(89) <- 9; code.(90) <- 93;
code.(91) <- 13; code.(92) <- 4;
code.(93) <- 11; code.(94) <- 3;
code.(95) <- -1048;
code.(96) <- 13; code.(97) <- 2;
code.(98) <- 15; code.(99) <- 8192;
code.(100) <- 6;
code.(101) <- 8; code.(102) <- 167;
code.(103) <- 13; code.(104) <- 3;
code.(105) <- 13; code.(106) <- 3;
code.(107) <- 16;
code.(108) <- 24;
code.(109) <- 15; code.(110) <- -1;
code.(111) <- 6;
code.(112) <- 8; code.(113) <- 132;
code.(114) <- 13; code.(115) <- 3;
code.(116) <- 15; code.(117) <- 1;
code.(118) <- 1;
code.(119) <- 13; code.(120) <- 5;
code.(121) <- 13; code.(122) <- 1;
code.(123) <- 19;
code.(124) <- 3;
code.(125) <- 2;
code.(126) <- 2;
code.(127) <- 9; code.(128) <- 96;
code.(129) <- 14;
code.(130) <- 9; code.(131) <- 164;
code.(132) <- 13; code.(133) <- 3;
code.(134) <- 13; code.(135) <- 4;
code.(136) <- 1;
code.(137) <- 13; code.(138) <- 5;
code.(139) <- 13; code.(140) <- 1;
code.(141) <- 13; code.(142) <- 6;
code.(143) <- 10; code.(144) <- 54;
code.(145) <- 3;
code.(146) <- 13; code.(147) <- 5;
code.(148) <- 15; code.(149) <- 1;
code.(150) <- 1;
code.(151) <- 13; code.(152) <- 7;
code.(153) <- 13; code.(154) <- 1;
code.(155) <- 19;
code.(156) <- 3;
code.(157) <- 4;
code.(158) <- 2;
code.(159) <- 9; code.(160) <- 96;
code.(161) <- 14;
code.(162) <- 14;
code.(163) <- 14;
code.(164) <- 14;
code.(165) <- 9; code.(166) <- 169;
code.(167) <- 13; code.(168) <- 3;
code.(169) <- 11; code.(170) <- 2;
let s = get_current_micros () in
let r = interp stk 1 code 0 in
let e = get_current_micros () in
print_int (e - s)
