(* -*- tuareg -*- *)
let rec make_values x y =
  let values = Array.make 2 0 in
  values.(0) <- x; values.(1) <- y;
  values
in
let rec make_args x y z w =
  let arr = Array.make 3 (Array.make 0 0) in
  arr.(0) <- x; arr.(1) <- y;
  arr.(2) <- (make_values z w);
  arr
in
let rec frame_reset stack old_base new_base ret n i =
  if n = i then (stack.(old_base + n) <- ret; old_base + n + 1)
  else (stack.(old_base + i) <- stack.(new_base + i);
        frame_reset stack old_base new_base ret n (i + 1))
in
let rec interp stack sp bytecode pc =
  jit_dispatch (pc=0) stack sp bytecode;
  let instr = bytecode.(pc) in
  (* print_int pc; print_newline (); *)
  (* Printf.printf "is: %d\tsp: %d\tpc: %d\n" instr sp pc; *)
  (* print_newline (); print_array print_int stack; print_newline (); *)
  if instr = 1 then             (* ADD *)
    let v2 = stack.(sp - 1) in  (* sp: sp - 1 *)
    let v1 = stack.(sp - 2) in  (* sp: sp - 2 *)
    stack.(sp - 2) <- v1 + v2;  (* sp: sp - 1 *)
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 2 then        (* SUB *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    stack.(sp - 2) <- v1 - v2;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 3 then        (* LT *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    let n = (if v1 < v2 then 1 else 0) in
    stack.(sp - 2) <- n;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 4 then        (* CONST *)
    let c = bytecode.(pc + 1) in
    stack.(sp) <- c;
    interp stack (sp + 1) bytecode (pc + 2)
  else if instr = 5 then        (* JUMP_IF_ZERO *)
    let addr = bytecode.(pc + 1) in
    let v = stack.(sp - 1) in
    if v = 0 then (
      if addr < pc then
        let args = make_args bytecode stack pc sp in
        call_caml_jit_entry args;
        interp stack (sp - 1) bytecode addr
      else
        interp stack (sp - 1) bytecode addr)
    else
      interp stack (sp - 1) bytecode (pc + 2)
  else if instr = 6 then        (* CALL *)
    let addr = bytecode.(pc + 1) in
    if is_mj () then
      let r = interp stack sp bytecode addr in
      stack.(sp - 1) <- r;
      interp stack sp bytecode (pc + 2)
    else
      (stack.(sp) <- pc + 2;
       interp stack (sp + 1) bytecode addr)
  else if instr = 7 then        (* RET *)
    if is_mj () then
      stack.(sp - 1)
    else
     (let n = bytecode.(pc + 1) in
      let v = stack.(sp - 1) in   (* sp: sp - 1 *)
      let pc2 = stack.(sp - 2) in (* sp: sp - 2 *)
      stack.(sp - n - 2) <- v;    (* sp: sp - 2 - n + 1 = sp - 1 - n *)
      interp stack (sp - n - 1) bytecode pc2)
  else if instr = 8 then        (* DUP *)
    let n = bytecode.(pc + 1) in
    let v = stack.(sp - n - 1) in
    stack.(sp) <- v;
    interp stack (sp + 1) bytecode (pc + 2)
  else if instr = 9 then        (* HALT *)
    stack.(sp - 1)
  else if instr = 10 then       (* FRAME_RESET *)
    let o = bytecode.(pc + 1) in
    let l = bytecode.(pc + 2) in
    let n = bytecode.(pc + 3) in
    let ret = stack.(sp-n-l-1) in
    let old_base = sp - n - l - o - 1 in
    let new_base = sp - n in
    let sp2 = frame_reset stack old_base new_base ret n 0 in
    interp stack sp2 bytecode (pc + 4)
  else if instr = 11 then       (* POP1 *)
    let v = stack.(sp - 1) in
    let _ = stack.(sp - 2) in
    stack.(sp - 2) <- v;
    interp stack (sp - 2) bytecode (pc + 1)
  else if instr = 14 then       (* JUMP *)
    let addr = bytecode.(pc + 1) in
    if addr < pc then
      let args = make_args bytecode stack pc sp in
      call_caml_jit_entry args;
      interp stack (sp - 1) bytecode addr
    else
      interp stack (sp - 1) bytecode addr
  else
    -1000 in
let code = Array.make 50 0 in
code.(0) <- 4;
code.(1) <- 9;
code.(2) <- 4;
code.(3) <- 10;
let st = Array.make 50 0 in
st.(0) <- 1 ;
print_int (interp st 1 code 0)
