(* -*- mode: tuareg -*- *)
(* let rec jit_merge_point _ _ _ = ();;
 * let rec can_enter_jit _ _ _ _ = ();;
 * let rec method_entry _ = ();;
 * let rec is_mj _ = true;;
 * let rec print_arr arr =
 *   print_string "[|";
 *   arr |> Array.iter (fun elem ->
 *       if elem <> 0 then
 *         (print_int elem; print_string "; "));
 *   print_string "|]"
 * ;;
 * let rec get_current_millis () = Unix.gettimeofday () *. 1e4 |> truncate;;
 * let rec save_bp () = ();; *)

let rec frame_reset stack old_base new_base ret n i =
  if n = i then (stack.(old_base + n) <- ret; old_base + n + 1)
  else (stack.(old_base + i) <- stack.(new_base + i);
        frame_reset stack old_base new_base ret n (i + 1));;

let rec pop stack sp = stack.(sp - 1) ;;
let rec push stack sp v = stack.(sp) <- v ;;

let rec interp stack sp bytecode pc =
  (* print_arr stack; print_newline (); *)
  jit_merge_point pc stack sp;
  let instr = bytecode.(pc) in
  if instr = 1 then             (* ADD *)
    let v2 = stack.(sp - 1) in    (* sp: sp - 1 *)
    let v1 = stack.(sp - 2) in    (* sp: sp - 2 *)
    stack.(sp - 2) <- (v1 + v2);  (* sp: sp - 1 *)
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 2 then        (* SUB *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    stack.(sp - 2) <- (v1 - v2);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 3 then        (* MUL *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    stack.(sp - 2) <- (v1 * v2);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 4 then        (* LT *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    let n = (@if v1 < v2 then 1 else 0) in
    stack.(sp - 2) <- n;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 5 then        (* CONST *)
    let c = bytecode.(pc + 1) in
    stack.(sp) <- c;
    interp stack (sp + 1) bytecode (pc + 2)
  else if instr = 6 then        (* JUMP_IF_ZERO *)
    let addr = bytecode.(pc + 1) in
    let v = stack.(sp - 1) in
    let sp2 = sp - 1 in
    @if v = 0 then (
      @if addr = (pc - 1) then (
        can_enter_jit stack sp2 bytecode addr;
        interp stack sp2 bytecode addr
      ) else interp stack sp2 bytecode addr
    ) else
      interp stack sp2 bytecode (pc + 2)
  else if instr = 7 then        (* CALL *)
    let addr = bytecode.(pc + 1) in
    if is_mj () then (
      stack.(sp) <- 100;
      let sp2 = sp + 1 in
      let r = mj_call stack sp2 bytecode addr in
      (* offset size *)
      (* ack n => sp - 1 *)
      (* tack x y z => sp - 3 *)
      stack.(sp - 1) <- r;
      interp stack (sp - 0) bytecode (pc + 2)
    ) else (
      stack.(sp) <- pc + 2;
      stack.(sp + 1) <- 200;
      let sp2 = sp + 2 in
      if addr < pc then (
        can_enter_jit stack sp2 bytecode addr;
        interp stack sp2 bytecode addr
      ) else (
        interp stack sp2 bytecode addr))
  else if instr = 8 then        (* RET *)
    let v = stack.(sp - 1) in
    let mode = stack.(sp - 2) in
    if mode = 200 then
      let n = bytecode.(pc + 1) in
      let addr = stack.(sp - 3) in (* sp: sp - 2 *)
      stack.(sp - n - 3) <- v;    (* sp: sp - 2 - n + 1 = sp - 1 - n *)
      let sp2 = sp - n - 2 in
      @if addr = pc - 2 then (
        can_enter_jit stack sp2 bytecode addr;
        interp stack sp2 bytecode addr
      ) else (
        interp stack sp2 bytecode addr)
    else v
  else if instr = 9 then        (* DUP *)
    if is_mj () then
      let n = bytecode.(pc + 1) in
      let v = stack.(sp - n - 1) in
      stack.(sp) <- v;
      interp stack (sp + 1) bytecode (pc + 2)
    else
      let n = bytecode.(pc + 1) in
      let n = n + 1 in
      let v = stack.(sp - n - 1) in
      stack.(sp) <- v;
      interp stack (sp + 1) bytecode (pc + 2)
  else if instr = 10 then        (* HALT *)
    stack.(sp - 1)
  else if instr = 11 then       (* FRAME_RESET *)
    let o = bytecode.(pc + 1) in
    let l = bytecode.(pc + 2) in
    let n = bytecode.(pc + 3) in
    let ret = stack.(sp-n-l-1) in
    let old_base = sp - n - l - o - 1 in
    let new_base = sp - n in
    let sp2 = frame_reset stack old_base new_base ret n 0 in
    interp stack sp2 bytecode (pc + 4)
  else if instr = 12 then       (* POP1 *)
    let v = stack.(sp - 1) in
    let _ = stack.(sp - 2) in
    stack.(sp - 2) <- v;
    interp stack (sp - 2) bytecode (pc + 1)
  else if instr = 13 then       (* JUMP *)
    let addr = bytecode.(pc + 1) in
    @if addr < pc then (
      can_enter_jit stack sp bytecode addr;
      interp stack sp bytecode addr)
    else (
      interp stack sp bytecode addr)
  else if instr = 14 then       (* METHOD_ENTRY *)
    (method_entry ();
     interp stack sp bytecode (pc + 1))
  else if instr = 15 then       (* DUP0 *)
    let v = stack.(sp - 1) in
    stack.(sp) <- v;
    interp stack (sp + 1) bytecode (pc + 1)
  else
    -1000
;;

let rec exec code pc =
  let stk = Array.make 5000 0 in
  let s = get_current_millis () in
  let r = interp stk 0 code pc in
  let e = get_current_millis () in
  print_int (e - s); print_newline ();
  print_int r; print_newline ()
;;

(* fib *)
(* let code = Array.make 50 0 in
 * save_bp ();
 * code.(0) <- 14;
 * code.(1) <- 9;
 * code.(2) <- 1;
 * code.(3) <- 5;
 * code.(4) <- 2;
 * code.(5) <- 4;
 * code.(6) <- 6;
 * code.(7) <- 12;
 * code.(8) <- 9;
 * code.(9) <- 1;
 * code.(10) <- 13;
 * code.(11) <- 27;
 * code.(12) <- 9;
 * code.(13) <- 1;
 * code.(14) <- 5;
 * code.(15) <- 1;
 * code.(16) <- 2;
 * code.(17) <- 7;
 * code.(18) <- 1;
 * code.(19) <- 9;
 * code.(20) <- 2;
 * code.(21) <- 5;
 * code.(22) <- 2;
 * code.(23) <- 2;
 * code.(24) <- 7;
 * code.(25) <- 1;
 * code.(26) <- 1;
 * code.(27) <- 8;
 * code.(28) <- 1;
 * code.(29) <- 14;
 * code.(30) <- 5;
 * code.(31) <- 17;
 * code.(32) <- 7;
 * code.(33) <- 1;
 * code.(34) <- 10;
 * exec code 29;
 *
 * finish_exec (); *)

(* sum *)
(* let code = Array.make 50 0 in
 * save_bp ();
 * code.(0) <- 14;
 * code.(1) <- 9;
 * code.(2) <- 1;
 * code.(3) <- 5;
 * code.(4) <- 1;
 * code.(5) <- 4;
 * code.(6) <- 6;
 * code.(7) <- 12;
 * code.(8) <- 9;
 * code.(9) <- 1;
 * code.(10) <- 13;
 * code.(11) <- 22;
 * code.(12) <- 9;
 * code.(13) <- 1;
 * code.(14) <- 9;
 * code.(15) <- 2;
 * code.(16) <- 5;
 * code.(17) <- 1;
 * code.(18) <- 2;
 * code.(19) <- 7;
 * code.(20) <- 1;
 * code.(21) <- 1;
 * code.(22) <- 8;
 * code.(23) <- 1;
 * code.(24) <- 14;
 * code.(25) <- 5;
 * code.(26) <- 5000;
 * code.(27) <- 7;
 * code.(28) <- 1;
 * code.(29) <- 10;
 * exec code 25; *)

(* fact *)
(* let code = Array.make 50 0 in
save_bp ();
code.(0) <- 14;
code.(1) <- 9;
code.(2) <- 1;
code.(3) <- 5;
code.(4) <- 1;
code.(5) <- 4;
code.(6) <- 6;
code.(7) <- 12;
code.(8) <- 5;
code.(9) <- 1;
code.(10) <- 13;
code.(11) <- 22;
code.(12) <- 9;
code.(13) <- 1;
code.(14) <- 9;
code.(15) <- 2;
code.(16) <- 5;
code.(17) <- 1;
code.(18) <- 2;
code.(19) <- 7;
code.(20) <- 1;
code.(21) <- 3;
code.(22) <- 8;
code.(23) <- 1;
code.(24) <- 14;
code.(25) <- 5;
code.(26) <- 2000;
code.(27) <- 7;
code.(28) <- 1;
code.(29) <- 10;
exec code 25; *)

(* ack *)
(* generated by bytegen.exe *)
(* let code = Array.make 100 0 in
save_bp ();
code.(0) <- 14;
code.(1) <- 9; code.(2) <- 2;     (* DUP 2 *)
code.(3) <- 5; code.(4) <- 1;     (* CONST 1 *)
code.(5) <- 4;                    (* LT *)
code.(6) <- 6; code.(7) <- 15;    (* JUMP_IF_ZERO *)
code.(8) <- 9; code.(9) <- 1;     (* DUP 1 *)
code.(10) <- 5; code.(11) <- 1;   (* CONST 1 *)
code.(12) <- 1;                   (* ADD *)
code.(13) <- 13; code.(14) <- 49; (* JUMP 49 *)
code.(15) <- 9; code.(16) <- 1;   (* DUP 1 *)
code.(17) <- 5; code.(18) <- 1;   (* CONST 1 *)
code.(19) <- 4;                   (* LT *)
code.(20) <- 6; code.(21) <- 33;  (* JUMP_IF_ZERO *)
code.(22) <- 9; code.(23) <- 2;   (* DUP 2 *)
code.(24) <- 5; code.(25) <- 1;   (* CONST 1 *)
code.(26) <- 2;                   (* SUB *)
code.(27) <- 5; code.(28) <- 1;   (* CONST 1 *)
code.(29) <- 7; code.(30) <- 1;   (* CALL 1 *)
code.(31) <- 13; code.(32) <- 49; (* JUMP 49 *)
code.(33) <- 9; code.(34) <- 2;   (* DUP 2 *)
code.(35) <- 5; code.(36) <- 1;   (* CONST 1 *)
code.(37) <- 2;                   (* SUB *)
code.(38) <- 9; code.(39) <- 3;   (* DUP 3 *)
code.(40) <- 9; code.(41) <- 3;   (* DUP 3 *)
code.(42) <- 5; code.(43) <- 1;   (* CONST 1 *)
code.(44) <- 2;                   (* SUB *)
code.(45) <- 7; code.(46) <- 1;   (* CALL 1 *)
code.(47) <- 7; code.(48) <- 1;   (* CALL 1 *)
code.(49) <- 8; code.(50) <- 2;   (* RET 2 *)
code.(51) <- 14;                  (* MAIN *)
code.(52) <- 5; code.(53) <- 3;   (* CONST  *)
code.(54) <- 5; code.(55) <- 5;   (* CONST  *)
code.(56) <- 7; code.(57) <- 1;   (* CALL *)
code.(58) <- 10;                  (* HALT *)
exec code 52; *)


(* tak *)
let code = Array.make 100 0 in
save_bp ();
code.(0) <- 14;
code.(1) <- 9; code.(2) <- 2;
code.(3) <- 9; code.(4) <- 4;
code.(5) <- 4;
code.(6) <- 6; code.(7) <- 45;
code.(8) <- 9; code.(9) <- 3;
code.(10) <- 5; code.(11) <- 1;
code.(12) <- 2;
code.(13) <- 9; code.(14) <- 3;
code.(15) <- 9; code.(16) <- 3;
code.(17) <- 7; code.(18) <- 1;
code.(19) <- 9; code.(20) <- 3;
code.(21) <- 5; code.(22) <- 1;
code.(23) <- 2;
code.(24) <- 9; code.(25) <- 3;
code.(26) <- 9; code.(27) <- 6;
code.(28) <- 7; code.(29) <- 1;
code.(30) <- 9; code.(31) <- 3;
code.(32) <- 5; code.(33) <- 1;
code.(34) <- 2;
code.(35) <- 9; code.(36) <- 6;
code.(37) <- 9; code.(38) <- 6;
code.(39) <- 7; code.(40) <- 1;
code.(41) <- 7; code.(42) <- 1;
code.(43) <- 13; code.(44) <- 47;
code.(45) <- 9; code.(46) <- 1;
code.(47) <- 8; code.(48) <- 3;
code.(49) <- 10;
code.(50) <- 5; code.(51) <- 12;
code.(52) <- 5; code.(53) <- 8;
code.(54) <- 5; code.(55) <- 1;
code.(56) <- 7; code.(57) <- 1;
code.(58) <- 10;
exec code 50;

finish_exec ()
