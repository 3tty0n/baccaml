(* -*- mode: tuareg -*- *)
let rec frame_reset stack old_base new_base ret n i =
  if n = i then (stack.(old_base + n) <- ret; old_base + n + 1)
  else (stack.(old_base + i) <- stack.(new_base + i);
        frame_reset stack old_base new_base ret n (i + 1));;

let rec pop stack sp = stack.(sp - 1) ;;
let rec push stack sp v = stack.(sp) <- v ;;

let rec interp stack sp bytecode pc =
  jit_merge_point pc stack sp;
  (* print_array print_int stack; print_newline (); *)
  let instr = bytecode.(pc) in
  if instr = 1 then             (* ADD *)
    let v2 = pop stack sp in        (* sp: sp - 1 *)
    let v1 = pop stack (sp - 1) in  (* sp: sp - 2 *)
    push stack (sp - 2) (v1 + v2);  (* sp: sp - 1 *)
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 2 then        (* SUB *)
    let v2 = pop stack sp in
    let v1 = pop stack (sp - 1) in
    push stack (sp - 2) (v1 - v2);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 3 then        (* MUL *)
    let v2 = pop stack sp in
    let v1 = pop stack (sp - 1) in
    push stack (sp - 2) (v1 * v2);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 4 then        (* LT *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    let n = (@if v1 < v2 then 1 else 0) in
    push stack (sp - 2) n;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 5 then        (* CONST *)
    let c = bytecode.(pc + 1) in
    stack.(sp) <- c;
    interp stack (sp + 1) bytecode (pc + 2)
  else if instr = 6 then        (* JUMP_IF_ZERO *)
    let addr = bytecode.(pc + 1) in
    let v = stack.(sp - 1) in
    let sp2 = sp - 1 in
    @if v = 0 then (
      @if addr = (pc - 1) then (
        can_enter_jit stack sp2 bytecode addr;
        interp stack sp2 bytecode addr
      ) else interp stack sp2 bytecode addr
    ) else
      interp stack sp2 bytecode (pc + 2)
  else if instr = 7 then        (* CALL *)
    let addr = bytecode.(pc + 1) in
    if is_mj () then (
      stack.(sp) <- 100;
      let sp2 = sp + 1 in
      let r = mj_call stack sp2 bytecode addr in
      stack.(sp - 1) <- r;
      interp stack sp bytecode (pc + 2)
    ) else (
      stack.(sp) <- pc + 2;
      stack.(sp + 1) <- 200;
      let sp2 = sp + 2 in
      if addr < pc then (
        can_enter_jit stack sp2 bytecode addr;
        interp stack sp2 bytecode addr
      ) else (
        interp stack sp2 bytecode addr))
  else if instr = 8 then        (* RET *)
    let v = stack.(sp - 1) in
    let mode = stack.(sp - 2) in
    if mode = 200 then
      let n = bytecode.(pc + 1) in
      let addr = stack.(sp - 3) in (* sp: sp - 2 *)
      stack.(sp - n - 3) <- v;    (* sp: sp - 2 - n + 1 = sp - 1 - n *)
      let sp2 = sp - n - 2 in
      if addr = (pc - 1) then (
        can_enter_jit stack sp2 bytecode addr;
        interp stack sp2 bytecode addr
      ) else (
        interp stack sp2 bytecode addr)
    else v
  else if instr = 9 then        (* DUP *)
    if is_mj () then
      let n = bytecode.(pc + 1) in
      let v = stack.(sp - n - 1) in
      stack.(sp) <- v;
      interp stack (sp + 1) bytecode (pc + 2)
    else
      let n = bytecode.(pc + 1) in
      let n = n + 1 in
      let v = stack.(sp - n - 1) in
      stack.(sp) <- v;
      interp stack (sp + 1) bytecode (pc + 2)
  else if instr = 10 then        (* HALT *)
    stack.(sp - 1)
  else if instr = 11 then       (* FRAME_RESET *)
    let o = bytecode.(pc + 1) in
    let l = bytecode.(pc + 2) in
    let n = bytecode.(pc + 3) in
    let ret = stack.(sp-n-l-1) in
    let old_base = sp - n - l - o - 1 in
    let new_base = sp - n in
    let sp2 = frame_reset stack old_base new_base ret n 0 in
    interp stack sp2 bytecode (pc + 4)
  else if instr = 12 then       (* POP1 *)
    let v = stack.(sp - 1) in
    let _ = stack.(sp - 2) in
    stack.(sp - 2) <- v;
    interp stack (sp - 2) bytecode (pc + 1)
  else if instr = 13 then       (* JUMP *)
    let addr = bytecode.(pc + 1) in
    @if addr < pc then (
      can_enter_jit stack sp bytecode addr;
      interp stack sp bytecode addr)
    else (
      interp stack sp bytecode addr)
  else if instr = 14 then       (* METHOD_ENTRY *)
    (method_entry ();
     interp stack sp bytecode (pc + 1))
  else if instr = 15 then       (* DUP0 *)
    let v = stack.(sp - 1) in
    stack.(sp) <- v;
    interp stack (sp + 1) bytecode (pc + 1)
  else
    -1000
;;

let rec exec code pc =
  let stk = Array.make 1000 0 in
  let s = get_current_millis () in
  let r = interp stk 0 code pc in
  let e = get_current_millis () in
  print_int (e - s); print_newline ();
  print_int r; print_newline ()
;;

(* fib *)
let code = Array.make 50 0 in
save_bp ();
code.(0) <- 14;
code.(1) <- 9;
code.(2) <- 1;
code.(3) <- 5;
code.(4) <- 2;
code.(5) <- 4;
code.(6) <- 6;
code.(7) <- 12;
code.(8) <- 9;
code.(9) <- 1;
code.(10) <- 13;
code.(11) <- 27;
code.(12) <- 9;
code.(13) <- 1;
code.(14) <- 5;
code.(15) <- 1;
code.(16) <- 2;
code.(17) <- 7;
code.(18) <- 1;
code.(19) <- 9;
code.(20) <- 2;
code.(21) <- 5;
code.(22) <- 2;
code.(23) <- 2;
code.(24) <- 7;
code.(25) <- 1;
code.(26) <- 1;
code.(27) <- 8;
code.(28) <- 1;
code.(29) <- 14;
code.(30) <- 5;
code.(31) <- 17;
code.(32) <- 7;
code.(33) <- 1;
code.(34) <- 10;
(* exec code 29; *)

(* sum *)
let code = Array.make 50 0 in
save_bp ();
code.(0) <- 14;
code.(1) <- 9;
code.(2) <- 1;
code.(3) <- 5;
code.(4) <- 1;
code.(5) <- 4;
code.(6) <- 6;
code.(7) <- 12;
code.(8) <- 9;
code.(9) <- 1;
code.(10) <- 13;
code.(11) <- 22;
code.(12) <- 9;
code.(13) <- 1;
code.(14) <- 9;
code.(15) <- 2;
code.(16) <- 5;
code.(17) <- 1;
code.(18) <- 2;
code.(19) <- 7;
code.(20) <- 1;
code.(21) <- 1;
code.(22) <- 8;
code.(23) <- 1;
code.(24) <- 14;
code.(25) <- 5;
code.(26) <- 5000;
code.(27) <- 7;
code.(28) <- 1;
code.(29) <- 10;
(* exec code 25; *)

(* fact *)
let code = Array.make 50 0 in
save_bp ();
code.(0) <- 14;
code.(1) <- 9;
code.(2) <- 1;
code.(3) <- 5;
code.(4) <- 1;
code.(5) <- 4;
code.(6) <- 6;
code.(7) <- 12;
code.(8) <- 5;
code.(9) <- 1;
code.(10) <- 13;
code.(11) <- 22;
code.(12) <- 9;
code.(13) <- 1;
code.(14) <- 9;
code.(15) <- 2;
code.(16) <- 5;
code.(17) <- 1;
code.(18) <- 2;
code.(19) <- 7;
code.(20) <- 1;
code.(21) <- 3;
code.(22) <- 8;
code.(23) <- 1;
code.(24) <- 14;
code.(25) <- 5;
code.(26) <- 5;
code.(27) <- 7;
code.(28) <- 1;
code.(29) <- 10;
exec code 25;

(* loop *)
(* let code =
 *   [|15; 2; 7;
 *     4; 1;
 *     2;
 *     4; 1;
 *     8; 1;
 *     3;
 *     5; 15;
 *     14; 3;
 *     9
 *   |] in
 * let st = Array.make 20 0 in
 * st.(0) <- 10000;
 * let s = get_current_millis () in
 * let res = (interp st 1 code 3) in
 * let e = get_current_millis () in
 * print_int res; print_newline ();
 * print_int (e - s); print_newline (); *)
()
