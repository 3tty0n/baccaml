(* -*- mode: tuareg -*- *)
(* let rec jit_merge_point _ _ _ = ();;
 * let rec can_enter_jit _ _ _ _ = ();;
 * let rec method_entry _ = ();;
 * let rec is_mj _ = true;;
 * let rec print_arr arr =
 *   print_string "[|";
 *   arr |> Array.iter (fun elem ->
 *       if elem <> 0 then
 *         (print_int elem; print_string "; "));
 *   print_string "|]"
 * ;;
 * let rec get_current_millis () = Unix.gettimeofday () *. 1e4 |> truncate;;
 * let rec save_bp () = ();; *)

let rec jit_merge_point x y z = ();;
let rec can_enter_jit x y z w = ();;
let rec is_mj _ = true;;
let rec save_bp _ = ();;
let rec get_current_millis _ = 0;;
let rec frame_reset stack old_base new_base ret n i =
  if n = i then (stack.(old_base + n) <- ret; old_base + n + 1)
  else (stack.(old_base + i) <- stack.(new_base + i);
        frame_reset stack old_base new_base ret n (i + 1));;

let rec pop stack sp = stack.(sp - 1) ;;
let rec push stack sp v = stack.(sp) <- v ;;

let rec interp stack sp bytecode pc =
  jit_merge_point pc stack sp;
  let instr = bytecode.(pc) in
  if instr = 1 then             (* ADD *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    stack.(sp - 2) <- (v1 + v2);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 2 then        (* SUB *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    stack.(sp - 2) <- (v1 - v2);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 3 then        (* MUL *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    stack.(sp - 2) <- (v1 * v2);
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 4 then        (* LT *)
    let v2 = stack.(sp - 1) in
    let v1 = stack.(sp - 2) in
    let n = (@if v1 < v2 then 1 else 0) in
    stack.(sp - 2) <- n;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 5 then        (* CONST *)
    let c = bytecode.(pc + 1) in
    stack.(sp) <- c;
    interp stack (sp + 1) bytecode (pc + 2)
  else if instr = 6 then        (* JUMP_IF_ZERO *)
    let addr = bytecode.(pc + 1) in
    let v = stack.(sp - 1) in
    let sp2 = sp - 1 in
    @if v = 0 then (
      @if addr = (pc - 1) then (
        can_enter_jit stack sp2 bytecode addr;
        interp stack sp2 bytecode addr
      ) else interp stack sp2 bytecode addr
    ) else
      interp stack sp2 bytecode (pc + 2)
  else if instr = 7 then        (* CALL *)
    let addr = bytecode.(pc + 1) in
    let rands = bytecode.(pc + 2) in
    if is_mj () then (
      stack.(sp) <- 100;
      let sp2 = sp + 2 in
      let r = interp stack sp2 bytecode addr in
      stack.(sp - rands) <- r;
      interp stack (sp - rands + 1) bytecode (pc + 3)
    ) else (
      stack.(sp) <- pc + 3;
      stack.(sp + 1) <- 200;
      let sp2 = sp + 2 in
      @if addr < pc then (
        can_enter_jit stack sp2 bytecode addr;
        interp stack sp2 bytecode addr
      ) else (
        interp stack sp2 bytecode addr))
  else if instr = 8 then        (* RET *)
    let v = stack.(sp - 1) in
    let mode = stack.(sp - 2) in
    if mode = 200 then
      let n = bytecode.(pc + 1) in
      let addr = stack.(sp - 3) in
      stack.(sp - n - 3) <- v;
      let sp2 = sp - n - 2 in
      @if addr = pc - 1 then (
        can_enter_jit stack sp2 bytecode addr;
        interp stack sp2 bytecode addr
      ) else (
        interp stack sp2 bytecode addr)
    else v
  else if instr = 9 then        (* DUP *)
    let n = bytecode.(pc + 1) in
    let v = stack.(sp - n - 1) in
    stack.(sp) <- v;
    interp stack (sp + 1) bytecode (pc + 2)
  else if instr = 10 then        (* HALT *)
    stack.(sp - 1)
  else if instr = 11 then        (* FRAME_RESET *)
    let o = bytecode.(pc + 1) in
    let l = bytecode.(pc + 2) in
    let n = bytecode.(pc + 3) in
    let ret = stack.(sp-n-l-1) in
    let old_base = sp - n - l - o - 1 in
    let new_base = sp - n in
    let sp2 = frame_reset stack old_base new_base ret n 0 in
    interp stack sp2 bytecode (pc + 4)
  else if instr = 12 then       (* POP1 *)
    let v = stack.(sp - 1) in
    let _ = stack.(sp - 2) in
    stack.(sp - 2) <- v;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 13 then       (* JUMP *)
    let addr = bytecode.(pc + 1) in
    @if addr < pc then (
      can_enter_jit stack sp bytecode addr;
      interp stack sp bytecode addr)
    else (
      interp stack sp bytecode addr)
  else if instr = 14 then       (* METHOD_ENTRY *)
    interp stack sp bytecode (pc + 1)
  else if instr = 15 then       (* EQ *)
    let v1 = stack.(sp - 1) in
    let v2 = stack.(sp - 2) in
    let v = (if v1 = v2 then 1 else 0) in
    stack.(sp - 2) <- v;
    interp stack (sp - 1) bytecode (pc + 1)
  else if instr = 16 then
    let n = bytecode.(pc + 1) in
    let v = stack.(sp - n - 1) in
    stack.(sp) <- v;
    interp stack (sp + 1) bytecode (pc + 2)
  else
    -1000
;;

let rec exec code pc =
  let stk = Array.make 3000 0 in
  let r = interp stk 0 code pc in
  print_int r; print_newline ()
;;

(* fib *)
let code = Array.make 38 0 in
code.(0) <- 14;
code.(1) <- 9; code.(2) <- 2;
code.(3) <- 5; code.(4) <- 2;
code.(5) <- 4;
code.(6) <- 6; code.(7) <- 12;
code.(8) <- 9; code.(9) <- 2;
code.(10) <- 13; code.(11) <- 29;
code.(12) <- 9; code.(13) <- 2;
code.(14) <- 5; code.(15) <- 1;
code.(16) <- 2;
code.(17) <- 7; code.(18) <- 1; code.(19) <- 1;
code.(20) <- 9; code.(21) <- 3;
code.(22) <- 5; code.(23) <- 2;
code.(24) <- 2;
code.(25) <- 7; code.(26) <- 1; code.(27) <- 1;
code.(28) <- 1;
code.(29) <- 8; code.(30) <- 1;
code.(31) <- 14;
code.(32) <- 5; code.(33) <- 10;
code.(34) <- 7; code.(35) <- 1; code.(36) <- 1;
code.(37) <- 10;
exec code 32;

(* sum *)
let code = Array.make 32 0 in
code.(0) <- 14;
code.(1) <- 9; code.(2) <- 2;
code.(3) <- 5; code.(4) <- 2;
code.(5) <- 4;
code.(6) <- 6; code.(7) <- 12;
code.(8) <- 9; code.(9) <- 2;
code.(10) <- 13; code.(11) <- 23;
code.(12) <- 9; code.(13) <- 2;
code.(14) <- 9; code.(15) <- 3;
code.(16) <- 5; code.(17) <- 1;
code.(18) <- 2;
code.(19) <- 7; code.(20) <- 1; code.(21) <- 1;
code.(22) <- 1;
code.(23) <- 8; code.(24) <- 1;
code.(25) <- 14;
code.(26) <- 5; code.(27) <- 5000;
code.(28) <- 7; code.(29) <- 1; code.(30) <- 1;
code.(31) <- 10;
exec code 26;

(* fact *)
let code = Array.make 32 0 in
code.(0) <- 14;
code.(1) <- 9; code.(2) <- 2;
code.(3) <- 5; code.(4) <- 1;
code.(5) <- 4;
code.(6) <- 6; code.(7) <- 12;
code.(8) <- 5; code.(9) <- 1;
code.(10) <- 13; code.(11) <- 23;
code.(12) <- 9; code.(13) <- 2;
code.(14) <- 9; code.(15) <- 3;
code.(16) <- 5; code.(17) <- 1;
code.(18) <- 2;
code.(19) <- 7; code.(20) <- 1; code.(21) <- 1;
code.(22) <- 3;
code.(23) <- 8; code.(24) <- 1;
code.(25) <- 14;
code.(26) <- 5; code.(27) <- 10;
code.(28) <- 7; code.(29) <- 1; code.(30) <- 1;
code.(31) <- 10;
exec code 26;

(* ack *)
let code = Array.make 63 0 in
code.(0) <- 14;
code.(1) <- 9; code.(2) <- 3;
code.(3) <- 5; code.(4) <- 1;
code.(5) <- 4;
code.(6) <- 6; code.(7) <- 15;
code.(8) <- 9; code.(9) <- 2;
code.(10) <- 5; code.(11) <- 1;
code.(12) <- 1;
code.(13) <- 13; code.(14) <- 52;
code.(15) <- 9; code.(16) <- 2;
code.(17) <- 5; code.(18) <- 1;
code.(19) <- 4;
code.(20) <- 6; code.(21) <- 34;
code.(22) <- 9; code.(23) <- 3;
code.(24) <- 5; code.(25) <- 1;
code.(26) <- 2;
code.(27) <- 5; code.(28) <- 1;
code.(29) <- 7; code.(30) <- 1; code.(31) <- 2;
code.(32) <- 13; code.(33) <- 52;
code.(34) <- 9; code.(35) <- 3;
code.(36) <- 5; code.(37) <- 1;
code.(38) <- 2;
code.(39) <- 9; code.(40) <- 4;
code.(41) <- 9; code.(42) <- 4;
code.(43) <- 5; code.(44) <- 1;
code.(45) <- 2;
code.(46) <- 7; code.(47) <- 1; code.(48) <- 2;
code.(49) <- 7; code.(50) <- 1; code.(51) <- 2;
code.(52) <- 8; code.(53) <- 2;
code.(54) <- 14;
code.(55) <- 5; code.(56) <- 3;
code.(57) <- 5; code.(58) <- 4;
code.(59) <- 7; code.(60) <- 1; code.(61) <- 2;
code.(62) <- 10;
exec code 55;

(* tak *)
let code = Array.make 64 0 in
code.(0) <- 14;
code.(1) <- 9; code.(2) <- 3;
code.(3) <- 9; code.(4) <- 5;
code.(5) <- 4;
code.(6) <- 6; code.(7) <- 49;
code.(8) <- 9; code.(9) <- 4;
code.(10) <- 5; code.(11) <- 1;
code.(12) <- 2;
code.(13) <- 9; code.(14) <- 4;
code.(15) <- 9; code.(16) <- 4;
code.(17) <- 7; code.(18) <- 1; code.(19) <- 3;
code.(20) <- 9; code.(21) <- 4;
code.(22) <- 5; code.(23) <- 1;
code.(24) <- 2;
code.(25) <- 9; code.(26) <- 4;
code.(27) <- 9; code.(28) <- 7;
code.(29) <- 7; code.(30) <- 1; code.(31) <- 3;
code.(32) <- 9; code.(33) <- 4;
code.(34) <- 5; code.(35) <- 1;
code.(36) <- 2;
code.(37) <- 9; code.(38) <- 7;
code.(39) <- 9; code.(40) <- 7;
code.(41) <- 7; code.(42) <- 1; code.(43) <- 3;
code.(44) <- 7; code.(45) <- 1; code.(46) <- 3;
code.(47) <- 13; code.(48) <- 51;
code.(49) <- 9; code.(50) <- 2;
code.(51) <- 8; code.(52) <- 3;
code.(53) <- 14;
code.(54) <- 5; code.(55) <- 6;
code.(56) <- 5; code.(57) <- 3;
code.(58) <- 5; code.(59) <- 2;
code.(60) <- 7; code.(61) <- 1; code.(62) <- 3;
code.(63) <- 10;
exec code 54;

(* is_prime *)
let code = Array.make 79 0 in
code.(0) <- 14;
code.(1) <- 9; code.(2) <- 3;
code.(3) <- 9; code.(4) <- 3;
code.(5) <- 4;
code.(6) <- 6; code.(7) <- 12;
code.(8) <- 9; code.(9) <- 3;
code.(10) <- 13; code.(11) <- 22;
code.(12) <- 9; code.(13) <- 3;
code.(14) <- 9; code.(15) <- 3;
code.(16) <- 2;
code.(17) <- 9; code.(18) <- 3;
code.(19) <- 7; code.(20) <- 1; code.(21) <- 2;
code.(22) <- 8; code.(23) <- 2;
code.(24) <- 14;
code.(25) <- 9; code.(26) <- 2;
code.(27) <- 9; code.(28) <- 3;
code.(29) <- 3;
code.(30) <- 9; code.(31) <- 4;
code.(32) <- 9; code.(33) <- 1;
code.(34) <- 4;
code.(35) <- 6; code.(36) <- 41;
code.(37) <- 5; code.(38) <- 1;
code.(39) <- 13; code.(40) <- 67;
code.(41) <- 9; code.(42) <- 4;
code.(43) <- 9; code.(44) <- 4;
code.(45) <- 7; code.(46) <- 1; code.(47) <- 2;
code.(48) <- 5; code.(49) <- 0;
code.(50) <- 15;
code.(51) <- 6; code.(52) <- 57;
code.(53) <- 5; code.(54) <- 0;
code.(55) <- 13; code.(56) <- 67;
code.(57) <- 9; code.(58) <- 4;
code.(59) <- 9; code.(60) <- 4;
code.(61) <- 5; code.(62) <- 1;
code.(63) <- 1;
code.(64) <- 7; code.(65) <- 25; code.(66) <- 2;
code.(67) <- 12;
code.(68) <- 8; code.(69) <- 2;
code.(70) <- 14;
code.(71) <- 5; code.(72) <- 32;
code.(73) <- 5; code.(74) <- 2;
code.(75) <- 7; code.(76) <- 25; code.(77) <- 2;
code.(78) <- 10;
exec code 71;
()
