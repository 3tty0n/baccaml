# Sumii's Makefile for Min-Caml (for GNU Make)

NCSUFFIX = .opt
CC = gcc
CFLAGS = -g -O2 -Wall
OCAMLLDFLAGS = -warn-error -31

COMPILER = min-caml
INTERPRETER = min-camli

PACKS = str

SOURCES_LIB = \
util.ml \
logger.ml \
float.c \
type.ml \
id.ml \
m.ml \
s.ml \
syntax.ml \
parser.mly \
lexer.mll \
typing.mli \
typing.ml \
kNormal.mli \
kNormal.ml \
alpha.mli \
alpha.ml \
beta.mli \
beta.ml \
assoc.mli \
assoc.ml \
inline.mli \
inline.ml \
constFold.mli \
constFold.ml \
elim.mli \
elim.ml \
closure.mli \
closure.ml \
asm.mli \
asm.ml \
virtual.mli \
virtual.ml \
simm.mli \
simm.ml \
regAlloc.mli \
regAlloc.ml \
emit.mli \
emit.ml

SOURCES_TOP = \
top.ml \
top.mli

TESTS = \
print \
sum-tail \
gcd \
sum \
fib \
ack \
even-odd \
adder \
funcomp \
cls-rec \
cls-bug \
cls-bug2 \
cls-reg-bug \
shuffle \
spill \
spill2 \
spill3 \
join-stack \
join-stack2 \
join-stack3 \
join-reg \
join-reg2 \
non-tail-if \
non-tail-if2 \
inprod \
inprod-rec \
inprod-loop \
matmul \
matmul-flat \
manyargs \
fib-tail \
array \
array2 \
float \
tuple

ifeq ($(PROJECT), interpreter)
  RESULT = $(INTERPRETER)
  SOURCES = $(SOURCES_LIB) jit.ml interp.ml interp.mli emitVirtual.mli emitVirtual.ml interpMain.ml $(SOURCES_TOP)
else
  RESULT = $(COMPILER)
  SOURCES = $(SOURCES_LIB) main.mli main.ml
endif

default: debug-code top

clean:: nobackup
	@rm -f $(INTERPRETER) $(INTERPRETER).top $(INTERPRETER).opt
	@rm -f $(COMPILER) $(COMPILER).top $(COMPILER).opt

test: $(TESTS:%=test/%.cmp)

.PRECIOUS: test/%.s test/% test/%.res test/%.ans test/%.cmp
TRASH = $(TESTS:%=test/%.s) $(TESTS:%=test/%) $(TESTS:%=test/%.res) $(TESTS:%=test/%.ans) $(TESTS:%=test/%.cmp)

test/%.s: $(RESULT) test/%.ml
	./$(RESULT) test/$*
test/%: test/%.s libmincaml.S stub.c
	$(CC) $(CFLAGS) -m32 $^ -lm -o $@
test/%.res: test/%
	$< > $@
test/%.ans: test/%.ml
	ocaml $< > $@
test/%.cmp: test/%.res test/%.ans
	diff $^ > $@

-include OCamlMakefile
